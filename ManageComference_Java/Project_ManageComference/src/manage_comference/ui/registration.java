/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package manage_comference.ui;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import static java.sql.JDBCType.NULL;

import java.util.List;
import javax.swing.JOptionPane;
import manage_comference.entity.AccountDAO;
import manage_comference.entity.AdUser;
import manage_comference.entity.Participants;
import manage_comference.entity.ParticipantsDAO;
import manage_comference.util.NewHibernateUtil;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author Admin
 */
public class registration extends javax.swing.JFrame {

    /**
     * Creates new form registration
     */
    List<AdUser> list, list2;
    List<Participants> listpar;
    List<Long> listCountUser;
    AdUser acc = new AdUser();

    public registration() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        mk = new javax.swing.JTextField();
        rmk = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        hoten = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        idhn = new javax.swing.JLabel();
        loaimh = new javax.swing.JLabel();
        sizeDiaDiem = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1140, 620));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("ĐĂNG KÝ");

        jLabel2.setText("Họ Tên");

        jLabel3.setText("Tên đăng nhập");

        jLabel4.setText("Mật khẩu");

        jLabel5.setText("Nhập lại mật khẩu");

        jLabel6.setText("Email");

        jButton1.setBackground(new java.awt.Color(102, 204, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Đăng Ký");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 51));
        jLabel7.setText("*");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 51));
        jLabel8.setText("*");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 51));
        jLabel9.setText("*");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("*");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 51));
        jLabel11.setText("*");

        idhn.setText("jLabel12");

        loaimh.setText("loaimanhinh");

        sizeDiaDiem.setText("sizeofDiaDiem");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idhn)
                            .addComponent(loaimh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mk, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hoten, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rmk, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addContainerGap(133, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sizeDiaDiem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(429, 429, 429))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(438, 438, 438))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hoten, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(57, 57, 57)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(mk, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel10)
                                .addGap(51, 51, 51))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(loaimh)
                                        .addGap(46, 46, 46))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(rmk, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addGap(45, 45, 45)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idhn)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(19, 19, 19)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(17, 17, 17)
                                .addComponent(sizeDiaDiem))
                            .addComponent(jButton1)))
                    .addComponent(jLabel2))
                .addContainerGap(121, Short.MAX_VALUE))
        );

        idhn.setVisible(false);
        loaimh.setVisible(false);
        sizeDiaDiem.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (hoten.getText().isEmpty() || userName.getText().isEmpty() || mk.getText().isEmpty() || rmk.getText().isEmpty() || email.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Vui lòng nhập đầy đủ thông tin");
        } else {
            if (loaimh.getText().equals("detail_khach")) {
                list = AccountDAO.checktontaiAccount(userName.getText());
                // System.out.println(list);
                if (list.isEmpty()) {
                    if (mk.getText().equals(rmk.getText()) == true) {

                        Session session = NewHibernateUtil.getSessionFactory()
                                .openSession();

                        Transaction transaction = null;
                        try {
                            transaction = session.beginTransaction();
                            Query q = session.createSQLQuery("insert into ad_user values(null,:HOTEN,:USERNAME,:PASSWORD_Acc,:EMAIL,true)");
                            q.setParameter("HOTEN", hoten.getText());
//                System.out.println(hoten.getText());
                            q.setParameter("USERNAME", userName.getText());
//                System.out.println(userName.getText());
                            q.setParameter("PASSWORD_Acc", getMd5(new String(mk.getText())));
//                System.out.println(getMd5(new String(mk.getText())));
                            q.setParameter("EMAIL", email.getText());
//                System.out.println(email.getText());
                            q.executeUpdate();
                            transaction.commit();
                            JOptionPane.showMessageDialog(null,
                                    "Đăng ký thành công");

//                       Đăng ký hội nghị
                            list2 = AccountDAO.checktontaiAccount(userName.getText());

//                        listpar = ParticipantsDAO.checkdangkyhn(list.get(0).getIdAccount(), Integer.parseInt(idhn.getText()));
//                    Check xem user này đã đăng ký hội nghị chưa, chưa mới cho đăng ký
                            listCountUser = ParticipantsDAO.countUser(Integer.parseInt(idhn.getText()));
                            Long count = listCountUser.get(0);
                            System.out.println(count);
//                        System.out.println("countUser: " + listCountUser.get(0) + " size of diadiem: " + sizeDiaDiem.getText());
//                        Kiểm tra diadiem đó có full người tham dự chưa
                            if (count < Long.parseLong(sizeDiaDiem.getText())) {
                                session = NewHibernateUtil.getSessionFactory()
                                        .openSession();

                                transaction = null;
                                try {
                                    transaction = session.beginTransaction();
                                    System.out.println("id_par: " + list2.get(0).getIdAccount() + " id_com " + Integer.parseInt(idhn.getText()));
                                    q = session.createSQLQuery("insert into participants_signup values(null,:ID_PAR,:ID_COMFERENCE)");
                                    q.setParameter("ID_PAR", list2.get(0).getIdAccount());
                                    q.setParameter("ID_COMFERENCE", Integer.parseInt(idhn.getText()));
                                    q.executeUpdate();
                                    transaction.commit();
                                    JOptionPane.showMessageDialog(null,
                                            "Đăng ký tham dự hội nghị thành công");

//                                 Quay lai trang listComference
                                    ListComference_User LU = new ListComference_User();
                                    LU.setVisible(true);
                                    LU.nameAcc.setText(list2.get(0).getUsername());
                                    LU.nameAcc.setVisible(true);
                                    LU.account.setVisible(true);
                                    LU.comboxLogIn.setVisible(false);
                                    dispose();

                                } catch (HibernateException ex) {
//Log the exception
                                    System.err.println(ex);
                                } finally {
                                    session.close();
                                }

                            } else {
                                JOptionPane.showMessageDialog(null,
                                        "Hội nghị đã đủ chỗ, không đăng ký thêm được");
                                ListComference_User LU = new ListComference_User();
                                LU.setVisible(true);
                                LU.nameAcc.setText(list2.get(0).getUsername());
                                LU.nameAcc.setVisible(true);
                                LU.account.setVisible(true);
                                LU.comboxLogIn.setVisible(false);
                                dispose();
                            }

                            dispose();
                        } catch (HibernateException ex) {
//Log the exception
                            transaction.rollback();
                            System.err.println(ex);
                        } finally {
                            session.close();

                        }

                    } else {
                        JOptionPane.showMessageDialog(null,
                                "Mật khẩu không giống nhau");
                    }

                } else {
                    JOptionPane.showMessageDialog(null,
                            "Tài khoản đã tồn tại");
                }
            } else {
                if (loaimh.getText().equals("list_khach")) {
                    list = AccountDAO.checktontaiAccount(userName.getText());
                    // System.out.println(list);
                    if (list.isEmpty()) {
                        if (mk.getText().equals(rmk.getText()) == true) {

                            Session session = NewHibernateUtil.getSessionFactory()
                                    .openSession();

                            Transaction transaction = null;
                            try {
                                transaction = session.beginTransaction();
                                Query q = session.createSQLQuery("insert into ad_user values(null,:HOTEN,:USERNAME,:PASSWORD_Acc,:EMAIL,true)");
                                q.setParameter("HOTEN", hoten.getText());
//                System.out.println(hoten.getText());
                                q.setParameter("USERNAME", userName.getText());
//                System.out.println(userName.getText());
                                q.setParameter("PASSWORD_Acc", getMd5(new String(mk.getText())));
//                System.out.println(getMd5(new String(mk.getText())));
                                q.setParameter("EMAIL", email.getText());
//                System.out.println(email.getText());
                                q.executeUpdate();
                                transaction.commit();
                                JOptionPane.showMessageDialog(null,
                                        "Đăng ký thành công");
                            } catch (HibernateException ex) {
//Log the exception
                                transaction.rollback();
                                System.err.println(ex);
                            } finally {
                                session.close();

                            }
                             list2 = AccountDAO.checktontaiAccount(userName.getText());
                            ListComference_User LU = new ListComference_User();
                                    LU.setVisible(true);
                                    LU.nameAcc.setText(list2.get(0).getUsername());
                                    LU.nameAcc.setVisible(true);
                                    LU.account.setVisible(true);
                                    LU.comboxLogIn.setVisible(false);
                                    dispose();
                        }
                    }
                }
            }
        }
//            acc.setHoten(hoten.getText());
//            acc.setEmail(email.getText());
//            acc.setUsername(userName.getText());
//            acc.setIdAccount(NULL);
//            acc.setLoai(true);

            // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
         * @param args the command line arguments
         */
    public String getMd5(String input) {
        try {

            // Static getInstance method is called with hashing MD5 
            MessageDigest md = MessageDigest.getInstance("MD5");

            // digest() method is called to calculate message digest 
            //  of an input digest() return array of byte 
            byte[] messageDigest = md.digest(input.getBytes());

            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest);

            // Convert message digest into hex value 
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new registration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField email;
    public javax.swing.JTextField hoten;
    public javax.swing.JLabel idhn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JLabel loaimh;
    public javax.swing.JTextField mk;
    public javax.swing.JTextField rmk;
    public javax.swing.JLabel sizeDiaDiem;
    public javax.swing.JTextField userName;
    // End of variables declaration//GEN-END:variables
}
